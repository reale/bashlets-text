#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-8 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


source bashlets core::datatype::string
source bashlets text::filter::ascii


BASHLETS_TEXT_FILTER_ENCODE_BASE64_NEWLINE=1

#@public
function bashlets::text::filter::encode::base64()
{
    ########################################################################
    #
    # Code borrowed from: text_convert.sh by Luciano D. Cerere
    #
    # cf. https://gist.github.com/ldante86/679c2240acd7cc838e1d6fcac97dc4d3
    #
    ########################################################################

    declare -a base64=( {A..Z} {a..z} {0..9} + / )

	local str i block lastblock

	str=$($BASHLETS_NAMESPACE ascii to_bin "$@")
	[ -z "$str" ] && return 1

	for (( i=0; i<${#str}; ((i+=6)) ))
	do
		block="${str:i:6}"
		if (( ${#block} < 5 ))
		then
			lastblock=${#block}
		fi

		while (( ${#block} < 6 ))
		do
			block="${block}0"
		done

		echo -n "${base64[ $($BASHLETS_NAMESPACE string bin_to_dec ${block}) ]}"
	done

	case $lastblock in
		4)	((lastblock -= 2)) ;;
		*)	((lastblock -= 1)) ;;
	esac

	case $BASHLETS_TEXT_FILTER_ENCODE_BASE64_NEWLINE in
		0)
			case $lastblock in
				1)	echo "o=" ;;
				2)	echo "K" ;;
				*)	echo "Cg==" ;;
			esac
			;;
		1)
			case $lastblock in
				1)	echo "==" ;;
				2)	echo "=" ;;
				*)	echo  ;;
			esac
			;;
	esac
}

#@public
function bashlets::text::filter::encode::urlencode()
{
    # inspired by https://gist.github.com/cdown/1163649

    (
        LC_COLLATE=C

        local length="${#1}" i
        for ((i = 0; i < length; i++))
        do
            local c="${1:i:1}"

            case $c in
                [a-zA-Z0-9.~_-])
                    printf "$c" ;;
                *)
                    printf '%%%02X' "'$c" ;;
            esac
        done
    )
}

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
